generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("PG_URL")
  directUrl = env("PG_DIRECT_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  emailVerified     DateTime?           @map("email_verified")
  name              String?
  password          String
  avatar            String?
  website           String?
  bio               String?
  role              Int                 @default(1)
  isSuspend         Boolean             @default(false) @map("is_suspend")
  extraFields       Json                @default("{}") @map("extra_fields")
  deletedAt         DateTime?           @map("deleted_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  accounts          Account[]
  Authenticator     Authenticator[]
  Comment           Comment[]
  Paste             Paste[]
  sessions          Session[]
  UserPasswordReset UserPasswordReset[]

  @@map("users")
}

model Authenticator {
  id                   BigInt   @id @unique @default(autoincrement())
  name                 String?  @map("name")
  credentialID         String   @map("credential_id")
  credentialPublicKey  Bytes    @map("credential_public_key")
  counter              Int      @default(0)
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?
  fmt                  String
  userId               String   @map("user_id")
  updatedAt            DateTime @updatedAt @map("updated_at")
  createdAt            DateTime @default(now()) @map("created_at")
  user                 User     @relation(fields: [userId], references: [id])

  @@index([credentialID], map: "credential_id")
  @@map("authenticators")
}

model UserPasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  type      Int      @default(1)
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id])

  @@map("user_password_resets")
}

model Notification {
  id        BigInt    @id
  userIds   BigInt[]  @map("user_ids")
  title     String
  content   String
  expiredAt DateTime  @map("expired_at")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("notifications")
}

model Announcement {
  id        BigInt    @id @default(autoincrement())
  title     String
  content   String
  pinned    Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("announcements")
}

model Paste {
  id          String    @id @default(cuid())
  title       String
  poster      String
  description String?
  content     Json
  type        Int       @default(1)
  syntax      String    @default("text")
  userId      String?   @map("user_id")
  expiredAt   DateTime? @map("expired_at")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Comment     Comment[]
  user        User?     @relation(fields: [userId], references: [id])

  @@map("pastes")
}

model Comment {
  id        BigInt    @id
  content   String
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    String    @map("user_id")
  pasteId   String    @map("paste_id")
  paste     Paste     @relation(fields: [pasteId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_requests")
}
